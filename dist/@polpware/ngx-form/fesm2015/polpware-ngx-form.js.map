{"version":3,"file":"polpware-ngx-form.js.map","sources":["ng://@polpware/ngx-form/lib/validators/url-validator.ts"],"sourcesContent":["import { FormControl } from '@angular/forms';\r\n\r\nimport * as Url from 'url-parse';\r\n\r\nexport interface IUrlParseResult {\r\n    protocol: 'http' | 'https';\r\n    slashes: boolean;\r\n    auth: string;\r\n    username: string;\r\n    password: string;\r\n    host: string;  // with port number \r\n    hostname: string; // without port number \r\n    port: number; // port number\r\n    pathname: string;\r\n    query: any;\r\n    hash: string; // # part\r\n    href: string;\r\n    origin: string;\r\n\r\n    set(key: string, value: string);\r\n    toString(): string;\r\n}\r\n\r\nexport interface IInvalidSpec {\r\n    invalid: boolean;\r\n}\r\n\r\nexport function validateUrl(value: string, parseQuery: boolean): IInvalidSpec | IUrlParseResult {\r\n\r\n    const pattern = '(https?://)?([\\\\da-z.-]+)\\\\.([a-z.]{2,6})[/\\\\w .-]*/?';\r\n    const expr = new RegExp(pattern);\r\n    if (!expr.test(value)) {\r\n        return { invalid: true };\r\n    }\r\n\r\n    const results = new Url(value, parseQuery) as IUrlParseResult;\r\n\r\n    if (!results.protocol || !results.host) {\r\n        return { invalid: true };\r\n    }\r\n\r\n    return results;\r\n}\r\n\r\n\r\n/**\r\n* Given a valid url, returns the normalized host name. \r\n* The returned host name does not include www and is lowercase.\r\n* The returned host includes host number. \r\n* {} string\r\n*/\r\nexport function normalizeHost(s: string, rm3w: boolean = true) {\r\n    // Assume that s is a valid url\r\n    const results = new Url(s) as IUrlParseResult;\r\n    let h = results.host;\r\n    if (h.startsWith('www')) {\r\n        if (rm3w) {\r\n            h = h.substring(4);\r\n        }\r\n    } else {\r\n        if (!rm3w) {\r\n            h = 'www.' + h;\r\n        }\r\n    }\r\n\r\n    return h;\r\n}\r\n\r\nexport function normalizeUrl(s: string, keepQuery: boolean = false, endWithSlash: boolean = false) {\r\n    // Assume that s is a valid url\r\n\r\n    const results = new Url(s) as IUrlParseResult;\r\n    let path = results.pathname;\r\n    path = path.replace(/\\/\\//g, '/', );\r\n    let u = results.protocol + '//' + results.host + path;\r\n    if (keepQuery) {\r\n        u = u + results.query;\r\n    }\r\n\r\n    if (u.endsWith('/')) {\r\n        if (!endWithSlash) {\r\n            u = u.substr(0, u.length - 1);\r\n        }\r\n    } else {\r\n        if (endWithSlash) {\r\n            u = u + '/';\r\n        }\r\n    }\r\n\r\n    return u;\r\n}\r\n\r\n// Type predicate \r\nfunction isInvalidSpec(v: IUrlParseResult | IInvalidSpec): v is IInvalidSpec {\r\n    return (<IInvalidSpec>v).invalid !== undefined;\r\n}\r\n\r\nexport function buildUrlValidator(options?: {\r\n    https?: boolean;\r\n    parseQuery?: boolean;\r\n}) {\r\n\r\n    const inputs = Object.assign({}, options);\r\n\r\n    return function(control: FormControl) {\r\n        const value = control.value;\r\n\r\n        const results = validateUrl(value, !!inputs.parseQuery);\r\n\r\n        if (isInvalidSpec(results)) {\r\n            return results;\r\n        }\r\n\r\n        if (inputs.https && results.protocol !== 'https') {\r\n            return { invalid: true };\r\n        }\r\n\r\n        return null;\r\n    };\r\n}\r\n"],"names":[],"mappings":";;;;;;AAEA;;;;;AAyBA,SAAgB,WAAW,CAAC,KAAa,EAAE,UAAmB;;UAEpD,OAAO,GAAG,uDAAuD;;UACjE,IAAI,GAAG,IAAI,MAAM,CAAC,OAAO,CAAC;IAChC,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,EAAE;QACnB,OAAO,EAAE,OAAO,EAAE,IAAI,EAAE,CAAC;KAC5B;;UAEK,OAAO,sBAAG,IAAI,GAAG,CAAC,KAAK,EAAE,UAAU,CAAC,EAAmB;IAE7D,IAAI,CAAC,OAAO,CAAC,QAAQ,IAAI,CAAC,OAAO,CAAC,IAAI,EAAE;QACpC,OAAO,EAAE,OAAO,EAAE,IAAI,EAAE,CAAC;KAC5B;IAED,OAAO,OAAO,CAAC;CAClB;;;;;;;;;;AASD,SAAgB,aAAa,CAAC,CAAS,EAAE,OAAgB,IAAI;;;UAEnD,OAAO,sBAAG,IAAI,GAAG,CAAC,CAAC,CAAC,EAAmB;;QACzC,CAAC,GAAG,OAAO,CAAC,IAAI;IACpB,IAAI,CAAC,CAAC,UAAU,CAAC,KAAK,CAAC,EAAE;QACrB,IAAI,IAAI,EAAE;YACN,CAAC,GAAG,CAAC,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC;SACtB;KACJ;SAAM;QACH,IAAI,CAAC,IAAI,EAAE;YACP,CAAC,GAAG,MAAM,GAAG,CAAC,CAAC;SAClB;KACJ;IAED,OAAO,CAAC,CAAC;CACZ;;;;;;;AAED,SAAgB,YAAY,CAAC,CAAS,EAAE,YAAqB,KAAK,EAAE,eAAwB,KAAK;;;;UAGvF,OAAO,sBAAG,IAAI,GAAG,CAAC,CAAC,CAAC,EAAmB;;QACzC,IAAI,GAAG,OAAO,CAAC,QAAQ;IAC3B,IAAI,GAAG,IAAI,CAAC,OAAO,CAAC,OAAO,EAAE,GAAG,CAAG,CAAC;;QAChC,CAAC,GAAG,OAAO,CAAC,QAAQ,GAAG,IAAI,GAAG,OAAO,CAAC,IAAI,GAAG,IAAI;IACrD,IAAI,SAAS,EAAE;QACX,CAAC,GAAG,CAAC,GAAG,OAAO,CAAC,KAAK,CAAC;KACzB;IAED,IAAI,CAAC,CAAC,QAAQ,CAAC,GAAG,CAAC,EAAE;QACjB,IAAI,CAAC,YAAY,EAAE;YACf,CAAC,GAAG,CAAC,CAAC,MAAM,CAAC,CAAC,EAAE,CAAC,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC;SACjC;KACJ;SAAM;QACH,IAAI,YAAY,EAAE;YACd,CAAC,GAAG,CAAC,GAAG,GAAG,CAAC;SACf;KACJ;IAED,OAAO,CAAC,CAAC;CACZ;;;;;;AAGD,SAAS,aAAa,CAAC,CAAiC;IACpD,OAAO,oBAAe,CAAC,IAAE,OAAO,KAAK,SAAS,CAAC;CAClD;;;;;AAED,SAAgB,iBAAiB,CAAC,OAGjC;;UAES,MAAM,GAAG,MAAM,CAAC,MAAM,CAAC,EAAE,EAAE,OAAO,CAAC;IAEzC,OAAO,UAAS,OAAoB;;cAC1B,KAAK,GAAG,OAAO,CAAC,KAAK;;cAErB,OAAO,GAAG,WAAW,CAAC,KAAK,EAAE,CAAC,CAAC,MAAM,CAAC,UAAU,CAAC;QAEvD,IAAI,aAAa,CAAC,OAAO,CAAC,EAAE;YACxB,OAAO,OAAO,CAAC;SAClB;QAED,IAAI,MAAM,CAAC,KAAK,IAAI,OAAO,CAAC,QAAQ,KAAK,OAAO,EAAE;YAC9C,OAAO,EAAE,OAAO,EAAE,IAAI,EAAE,CAAC;SAC5B;QAED,OAAO,IAAI,CAAC;KACf,CAAC;CACL;;;;;;;;;;;;;;"}
