{"version":3,"file":"polpware-ngx-form.umd.js.map","sources":["ng://polpware-ngx-form/lib/validators/url-validator.ts"],"sourcesContent":["import { FormControl } from '@angular/forms';\r\n\r\nimport * as Url from 'url-parse';\r\n\r\nexport interface IUrlParseResult {\r\n    protocol: 'http' | 'https';\r\n    slashes: boolean;\r\n    auth: string;\r\n    username: string;\r\n    password: string;\r\n    host: string;  // with port number \r\n    hostname: string; // without port number \r\n    port: number; // port number\r\n    pathname: string;\r\n    query: any;\r\n    hash: string; // # part\r\n    href: string;\r\n    origin: string;\r\n\r\n    set(key: string, value: string);\r\n    toString(): string;\r\n}\r\n\r\nexport interface IInvalidSpec {\r\n    invalid: boolean;\r\n}\r\n\r\nexport function validateUrl(value: string, parseQuery: boolean): IInvalidSpec | IUrlParseResult {\r\n\r\n    const pattern = '(https?://)?([\\\\da-z.-]+)\\\\.([a-z.]{2,6})[/\\\\w .-]*/?';\r\n    const expr = new RegExp(pattern);\r\n    if (!expr.test(value)) {\r\n        return { invalid: true };\r\n    }\r\n\r\n    const results = new Url(value, parseQuery) as IUrlParseResult;\r\n\r\n    if (!results.protocol || !results.host) {\r\n        return { invalid: true };\r\n    }\r\n\r\n    return results;\r\n}\r\n\r\n\r\n/**\r\n* Given a valid url, returns the normalized host name. \r\n* The returned host name does not include www and is lowercase.\r\n* The returned host includes host number. \r\n* {} string\r\n*/\r\nexport function normalizeHost(s: string) {\r\n    // Assume that s is a valid url\r\n    const results = new Url(s) as IUrlParseResult;\r\n    const h = results.host;\r\n    if (h.startsWith('www')) {\r\n        return h.substring(4);\r\n    }\r\n    return h;\r\n}\r\n\r\nexport function normalizeUrl(s: string) {\r\n    // Assume that s is a valid url\r\n    const results = new Url(s) as IUrlParseResult;\r\n    return results.toString();\r\n}\r\n\r\n// Type predicate \r\nfunction isInvalidSpec(v: IUrlParseResult | IInvalidSpec): v is IInvalidSpec {\r\n    return (<IInvalidSpec>v).invalid !== undefined;\r\n}\r\n\r\nexport function buildUrlValidator(options?: {\r\n    https?: boolean;\r\n    parseQuery?: boolean;\r\n}) {\r\n\r\n    const inputs = Object.assign({}, options);\r\n\r\n    return function(control: FormControl) {\r\n        const value = control.value;\r\n\r\n        const results = validateUrl(value, !!inputs.parseQuery);\r\n\r\n        if (isInvalidSpec(results)) {\r\n            return results;\r\n        }\r\n\r\n        if (inputs.https && results.protocol !== 'https') {\r\n            return { invalid: true };\r\n        }\r\n\r\n        return null;\r\n    };\r\n}\r\n"],"names":[],"mappings":";;;;;;;;;;AAEA;;;;;AAyBA,yBAA4B,KAAa,EAAE,UAAmB;;YAEpD,OAAO,GAAG,uDAAuD;;YACjE,IAAI,GAAG,IAAI,MAAM,CAAC,OAAO,CAAC;QAChC,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,EAAE;YACnB,OAAO,EAAE,OAAO,EAAE,IAAI,EAAE,CAAC;SAC5B;;YAEK,OAAO,sBAAG,IAAI,GAAG,CAAC,KAAK,EAAE,UAAU,CAAC,EAAmB;QAE7D,IAAI,CAAC,OAAO,CAAC,QAAQ,IAAI,CAAC,OAAO,CAAC,IAAI,EAAE;YACpC,OAAO,EAAE,OAAO,EAAE,IAAI,EAAE,CAAC;SAC5B;QAED,OAAO,OAAO,CAAC;IACnB,CAAC;;;;;;;;;AASD,2BAA8B,CAAS;;;YAE7B,OAAO,sBAAG,IAAI,GAAG,CAAC,CAAC,CAAC,EAAmB;;YACvC,CAAC,GAAG,OAAO,CAAC,IAAI;QACtB,IAAI,CAAC,CAAC,UAAU,CAAC,KAAK,CAAC,EAAE;YACrB,OAAO,CAAC,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC;SACzB;QACD,OAAO,CAAC,CAAC;IACb,CAAC;;;;;AAED,0BAA6B,CAAS;;;YAE5B,OAAO,sBAAG,IAAI,GAAG,CAAC,CAAC,CAAC,EAAmB;QAC7C,OAAO,OAAO,CAAC,QAAQ,EAAE,CAAC;IAC9B,CAAC;;;;;;IAGD,uBAAuB,CAAiC;QACpD,OAAO,oBAAe,CAAC,IAAE,OAAO,KAAK,SAAS,CAAC;IACnD,CAAC;;;;;AAED,+BAAkC,OAGjC;;YAES,MAAM,GAAG,MAAM,CAAC,MAAM,CAAC,EAAE,EAAE,OAAO,CAAC;QAEzC,OAAO,UAAS,OAAoB;;gBAC1B,KAAK,GAAG,OAAO,CAAC,KAAK;;gBAErB,OAAO,GAAG,WAAW,CAAC,KAAK,EAAE,CAAC,CAAC,MAAM,CAAC,UAAU,CAAC;YAEvD,IAAI,aAAa,CAAC,OAAO,CAAC,EAAE;gBACxB,OAAO,OAAO,CAAC;aAClB;YAED,IAAI,MAAM,CAAC,KAAK,IAAI,OAAO,CAAC,QAAQ,KAAK,OAAO,EAAE;gBAC9C,OAAO,EAAE,OAAO,EAAE,IAAI,EAAE,CAAC;aAC5B;YAED,OAAO,IAAI,CAAC;SACf,CAAC;IACN,CAAC;;;;;;;;;;;;;;;;;;;;;;;;;"}
