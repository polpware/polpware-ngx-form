{"version":3,"sources":["ng://polpware-ngx-form/lib/validators/url-validator.ts"],"names":["validateUrl","value","parseQuery","RegExp","test","invalid","results","Url","protocol","host","normalizeHost","s","h","startsWith","substring","normalizeUrl","toString","buildUrlValidator","options","inputs","Object","assign","control","isInvalidSpec","v","undefined","https"],"mappings":"oQA2BA,SAAAA,EAA4BC,EAAeC,GAIvC,IADa,IAAIC,OADD,yDAENC,KAAKH,GACX,MAAO,CAAEI,SAAS,OAGhBC,EAAO,IAAOC,EAAIN,EAAOC,GAE/B,OAAKI,EAAQE,UAAaF,EAAQG,KAI3BH,EAHI,CAAED,SAAS,mCAa1B,SAAAK,EAA8BC,OAGpBC,EADO,IAAOL,EAAII,GACNF,KAClB,OAAIG,EAAEC,WAAW,OACND,EAAEE,UAAU,GAEhBF,kBAGX,SAAAG,EAA6BJ,GAGzB,OADa,IAAOJ,EAAII,GACTK,gCAQnB,SAAAC,EAAkCC,OAKxBC,EAASC,OAAOC,OAAO,GAAIH,GAEjC,OAAO,SAASI,OAGNhB,EAAUN,EAFFsB,EAAQrB,QAEekB,EAAOjB,YAE5C,OAhBR,SAAAqB,EAAuBC,GACnB,OAAO,EAAkBnB,UAAYoB,UAe7BF,CAAcjB,GACPA,EAGPa,EAAOO,OAA8B,UAArBpB,EAAQE,SACjB,CAAEH,SAAS,GAGf","sourcesContent":["import { FormControl } from '@angular/forms';\r\n\r\nimport * as Url from 'url-parse';\r\n\r\nexport interface IUrlParseResult {\r\n    protocol: 'http' | 'https';\r\n    slashes: boolean;\r\n    auth: string;\r\n    username: string;\r\n    password: string;\r\n    host: string;  // with port number \r\n    hostname: string; // without port number \r\n    port: number; // port number\r\n    pathname: string;\r\n    query: any;\r\n    hash: string; // # part\r\n    href: string;\r\n    origin: string;\r\n\r\n    set(key: string, value: string);\r\n    toString(): string;\r\n}\r\n\r\nexport interface IInvalidSpec {\r\n    invalid: boolean;\r\n}\r\n\r\nexport function validateUrl(value: string, parseQuery: boolean): IInvalidSpec | IUrlParseResult {\r\n\r\n    const pattern = '(https?://)?([\\\\da-z.-]+)\\\\.([a-z.]{2,6})[/\\\\w .-]*/?';\r\n    const expr = new RegExp(pattern);\r\n    if (!expr.test(value)) {\r\n        return { invalid: true };\r\n    }\r\n\r\n    const results = new Url(value, parseQuery) as IUrlParseResult;\r\n\r\n    if (!results.protocol || !results.host) {\r\n        return { invalid: true };\r\n    }\r\n\r\n    return results;\r\n}\r\n\r\n\r\n/**\r\n* Given a valid url, returns the normalized host name. \r\n* The returned host name does not include www and is lowercase.\r\n* The returned host includes host number. \r\n* {} string\r\n*/\r\nexport function normalizeHost(s: string) {\r\n    // Assume that s is a valid url\r\n    const results = new Url(s) as IUrlParseResult;\r\n    const h = results.host;\r\n    if (h.startsWith('www')) {\r\n        return h.substring(4);\r\n    }\r\n    return h;\r\n}\r\n\r\nexport function normalizeUrl(s: string) {\r\n    // Assume that s is a valid url\r\n    const results = new Url(s) as IUrlParseResult;\r\n    return results.toString();\r\n}\r\n\r\n// Type predicate \r\nfunction isInvalidSpec(v: IUrlParseResult | IInvalidSpec): v is IInvalidSpec {\r\n    return (<IInvalidSpec>v).invalid !== undefined;\r\n}\r\n\r\nexport function buildUrlValidator(options?: {\r\n    https?: boolean;\r\n    parseQuery?: boolean;\r\n}) {\r\n\r\n    const inputs = Object.assign({}, options);\r\n\r\n    return function(control: FormControl) {\r\n        const value = control.value;\r\n\r\n        const results = validateUrl(value, !!inputs.parseQuery);\r\n\r\n        if (isInvalidSpec(results)) {\r\n            return results;\r\n        }\r\n\r\n        if (inputs.https && results.protocol !== 'https') {\r\n            return { invalid: true };\r\n        }\r\n\r\n        return null;\r\n    };\r\n}\r\n"]}